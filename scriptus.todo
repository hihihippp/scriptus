	mvnDebug jetty:run -Dscriptus.config=test-scriptus.properties
	mvnDebug jetty:run -Dscriptus.config=test-twitter.properties
	mvnDebug jetty:run -Dscriptus.config=command-line-scriptus.properties
	mvn clean install -Dmaven.test.skip=true
	mvn cobertura:clean clean site -server -Dmaven.test.skip=false	mvn jetty:run -Dmaven.test.skip=false
	mvn -Dtest=Testcase_ScriptusDAO test-compile surefire:test
	
	programming on a human timescale
	
	freedom of assembly
	
	schema creation (if necessary)
	 - constraints
X no	 - will need to hand-wire entityManagerFactory etc.
	 - fix bad @Ids
	 - DB location needs checking
	 - don't hardcode embedded db names?
	 - test sources duplicated, create unique id
	 
	JPA testing
test	 - move serialisation out of ScriptProcess  and into memory store
test	 - process children

	/**
	 * Writes the script state to DAO. If the pid is null we assign a new one.
	 */
	public void save() {
		if (getPid() == null) {
			setPid(UUID.randomUUID());
		} else {
			version++;
		}

		LOG.debug("saving " + getPid().toString().substring(30));

		Context cx = Context.enter();
		cx.setClassShutter(new ScriptusClassShutter());
		cx.setOptimizationLevel(-1); // must use interpreter mode
		
		try {
			ByteArrayOutputStream bout = new ByteArrayOutputStream();
			ObjectOutputStream out = new ObjectOutputStream(bout);
			out.writeObject(this);
			out.writeObject(getGlobalScope());
			out.writeObject(getContinuation());
			out.close();

			datastore.writeProcess(getPid(), bout.toByteArray());
				
		} catch (ScriptusRuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new ScriptusRuntimeException(e);
		} finally {
			Context.exit();
		}

	}

	/**
	 * Sets the state from DAO using the supplied process ID (pid).
	 * 
	 * TODO storage must be versioned, since scripts can have a long life-span.
	 * 
	 * @param pid
	 */
	public void load(final UUID pid) {

//		this.datastore = datastore;// not set when deserialising below

		if (pid == null) {
			throw new ScriptusRuntimeException("Cannot load null pid");
		}

		LOG.debug("loading " + pid.toString().substring(30));

		Context cx = Context.enter();
		cx.setClassShutter(new ScriptusClassShutter());
		cx.setOptimizationLevel(-1); // must use interpreter mode
		
		try {

			byte[] process = datastore.loadProcess(pid);
			
			if(process == null) {
				throw new ProcessNotFoundException(pid.toString());
			}
			
			InputStream bais = new ByteArrayInputStream(process);

//			ScriptusAPI tmpScriptusApi = new ScriptusAPI(config);
//			Scriptable tmpGlobalScope = tmpScriptusApi.createScope(cx);

			ObjectInputStream in = new ObjectInputStream(bais);

			ScriptProcess p = (ScriptProcess) in.readObject();
			
			this.pid = p.pid;
			this.waiterPid = p.waiterPid;
			this.source = p.source;
			this.sourceName = p.sourceName;
			this.userId = p.userId;
			this.args = p.args;
			this.state = p.state;
			this.children = p.children;
			this.compiled = p.compiled;
			this.owner = p.owner;
			this.isRoot = p.isRoot;
			this.version = p.version;
			
			p = null;

			this.setGlobalScope((ScriptableObject) in.readObject());
			this.setContinuation(in.readObject());

			in.close();
		} catch (ScriptusRuntimeException e) {
			throw e;
		} catch (Exception e) {
			throw new ScriptusRuntimeException(e);
		} finally {
			Context.exit();
		}
		

	}
	 
	DB location - is it working properly?


JPADatastore
 -> em
 -> datasource in config
EmbeddedDBJPADatastore extendfs JPADatastore
 -> init() checks freshness, creates if necessary?

		

The latest series of commits changes nothing on the 'user' end of Scriptus but has affected quite a lot of the internals.

The biggest change is that the command line transport is now more of an interactive console. You now have far more flexibility in testing scripts locally, because the command-line tool can do anything that the Twitter transport can do.

Next, the internal interface between the transports in Scriptus and everything else is now a lot cleaner. This should make it easier for anyone wanting to implement a new transport.

And finally, the message 'routing' has changed. Previously, if multiple processes were listening to one user, or to any user, then the last process to call `listen()` would be the one to receive any messages. Now, all processes receive a copy of the message. This is quite a change from the previous situation, however it allows for a greater range of functionality in scripts - for example, scripts that 'listen' to a users tweet stream and collate information are now possible.

Given that the datastore has also been modified, this is now Scriptus 0.4.0, and is available to download at the normal location. 
	 


	
IdScriptableObject


In addition to this change, a new page has been added to the documentation, [HOWTO extend Scriptus with custom functionality](). Inspired by some conversations with Nela & Emil at xxx, who've been using Scriptus to run a questionnaire for their followers on Twitter, I've documented the best way to add new functionalities to Scriptus.

In the example, a poll is taken and the poll results are stored in a MySQL database. The MySQL DB is accessed separately to the Scriptus storage system, which is still used exclusively for script state. [Check it out]() if you like Scriptus but want it to do extra things that are really specific to your needs.

	 - simple process admin?
	 - API
	    - listen() should respond with first tweet after listen() called (not first mention)
	       - like that today, but done not the right way
	       - add timestamp to correlation
test	 - anything that wake()s doens't do so exactly on time, but to the nearest scheduler interval.
test	 - scheduler should use short-term memory-based queue with rolling pre-loading in advance from datastore
test	 - scheduler should queue task in memory undfer a certain delta
	problem - only stuff sent up to that minute will be executed

The `listen()` call works by registering a process as a listener inside the Twitter transport. We then poll Twitter every minute for mentions by the user being listened to.

However, if the user 'speaks' after the last poll but before the timeout, then this tweet is not picked up before the process is woken and null is returned to the program.

In addition, the wake is not unregistered on receipt of a message, causing a needless process load & nonce check.

	
	PROBLEMS
	DOCS + can use other correlations
	 - Collecting multiple responses in a short time won't work because we don't check message on timeout, only during.
	   --> needs to have a per-process cursor.
	    +DAO process cache?
	 - when the twitter/facebook token expires, the process craps out.
	       --> it should pause and ask the user to re-authenticate
	       --> depends on user checking UI or having alternate auth mechanism
	SOLUTIONS
	 
	 test
	 two processes listening
	 two processes listening to a user
	 two processes listening to a message ID
	  --> 6 responses to one reply
	  
	-- ask && listen put MessageCorrelationDeletingTansportCheckingWake extends Wake
	  --> unregister correlation on wake,
	  --> check transports on wake.
		 
	    - extending Scriptus
	       - adding new method calls
	       beginning to think that an RDBMS would be the best way to keep track off all this stuff
	        - transactions
	        - relations
	online demo
	 - twitter account per user, not per install
	    - auth process as designed
	    - store keys in sdb, encrypt then HMAC (or whatever it is)
	    - things like processedIncomings & listeners are per install, should be per user per pid
	       --> would also fix listening
	   -->per user
	   	 datastore instance
 	       transport instance
 	       facade
 	       -->storing auth creds for twitter
 	       -->encrypt before saving!
 	       tbl_user_creds
 	       uid / service / token / secret
 	       threadlocal for user info?
	 - better site design
	 - inline documentation / QRC? 
	 - use bootstrap
	 - , convert docs to HTML
	   -> use pegDown or pull from gitHub?	
	 - owner should be twitter account
	 - MVC w/servlets, stateless sessions with HMAC?
	 - limits (size, tweets, # processes, CPU time, transfer)
	 
	 git stash save diffaccs



	pipe
	read
	write
	 - separate out state into SDB
	 - incl. process table
	add time machine to rhino
x no?	filesystem
	 - procfs
	 - mnt

	IMPORTANT - rhino  
	git remote add upstream git://github.com/mozilla/rhino.git
	native* migration - help out & write migration
test	  Boolean.length / Boolean.prototype.constructor.length == 1...	
	Questions
	return null / IllegalArgumentException?

	rhino migration script for serialised stuff
	 -->migrating tags from Strings to Enums on properties ...

	improve first page of minisite
	 - better focus, appeal, call to action

	twitter integration
test	   - listen

	 - habit judo from metafilter
	    -> see detials in script habitJudo.js
	    -> rate or just every X days? ask the guy
	    
	 - line diet
	    - simple calculus
	  desired weight is healthy,
	  desired rate of weight loss is medically safe (ask for age maybe?)
	  - need to reverse-engineer curves
	  
	 - multi-user scripts:
	   - secret santa!
	   - auction
	   - election
	   - rota
	   - poll
	 - game tournament
	    - brush up on set theory
	 - adventure game from Nathanael

	jetty should be error level, not "null" level
	war file should print version, not print log4j warnings
	should also print usage option when -h or --help is used

medium	
	Amazon AMI for playing with Scriptus
low
	add WAR filter to prevent traversal, downloading class files
	pids should be URNs: "pid:12345";
	docs: easy to write annoying, difficult to be considerate...
	move outstanding stuff to github tasks

	*************BUGS not documented in known-problems.md
	      - children list should be managed separately (SDB?)
	         - might as well separate state out too...
	         - add status column
	      - processes not deleted properly on wait / termination
	      
	site
	 - index.html & default layout re-use CSS & HTML
	 - site doesn't work locally and on github due to "/scriptus" relocation

	promo
still a newbie?		mefi projects?
		demo on twitter 
		 - install the iPhone client
		   - upgrade firmware, finally
		blog posts
		 - idea of 'slow code'		 
		 - idea of 'social operating system'








While I was thinking about the kind of programs I could write with Scriptus, I realised that my general concept of 'execution' was quite limiting, because it limited me to in-memory processes. Once execution can happen anywhere, like in the XKCD cartoon(http://xkcd.com/505/), we can use it for anything, on any scale.

For example, how an election works is common knowledge. The process of nomination, candidature, campaigning and voting takes months, but is procedurally simple at heart. How do we write a program that that will let anybody run an election?

The answer is to write the program and then think about how to run it. Once we expand the idea of programming to include many of the things that encompass everyday life, it becomes easier to think about Tim O'Reilly's idea of "working on stuff that matters".







The Long Code Manifesto

Computers run faster and faster. But in the real world, anything important takes time and effort to achieve.

If our goal is to make the world a better place, then we need to learn to code on a world-changing scale.

Therefore, we should not think of /execution/ as being a transient, in-memory process of computation.

Programs that change the world will run for years or decades, so they can't reside on any one computer, and they need to stick around.

The challenge is to write programs for the long term. Write programs that run for months, years or decades.

Their input and output will be our thoughts and actions, and they will work with us first, computers second.

Because computers can't change the world. We can.




I am having trouble answering the question "yes but what is it for?" because I don't know. I project all my hopes onto it for how I'd like to change the world, but this is all about human problems, not a software project. So I 'fess up and say that this project is firstly for me, and might become a useful organisational prosthetic in future if I get there, and secondly, maybe in future, about reducing the startup / transaction / operational costs of organising / orchestrating human activity.

On the other hand, the instant the project does have users, it is no longer about me.

	 		 	
**running track of compromises & known bugs
	script bodies wrapped with (new function(){...})() at compile time - should include arguments or change?
	two concepts of identity: one via openId, one via twitter. Unify?
	
	 scriptus AWS DAO should store process state separately - it's updated by itself all the time
	 nonce should be extended to all continuations?
	  - avoid double-acting? or if the server is shut down mid-execution, allows recoverability?
	 
	 
X no 	Wait capital W
X	bound at "scriptus" not as globals - a good thing?
X    - logging
X    - exception hierarchy
X    - spring configuration
X    - move to UUIDs
X	write basic script that 
X		return
X		fork
X		wait
X		wait2
X		say
X		ask
X	 - in UNIX, wait() returns the pid you got the result for...
X    - test-cases
X	get addTwoNumbers running
X should be OK    - test wait function - what if result is a function referring to this, and it's called?
X	write basic script that does maths, returns 2+2
X	 - save and restore, exec twice
X how can we
X - add new participants at will
X - more generally, respond to external events?
X    --> events should come conversationally
X	listen(who)
X	test
X	 - proper DAO behind a compilable & usable script engine
X	    - separate out DAO properly
X	    - get AWS DAO working
X test	 - basic web interface for launching scripts
X test		/WEB-INF/jsp/editScript.jsp
x	    - openID auth
X test	    - list scripts
X test	    - C
X test	      R
X test	      U
X test	       - servlet post handling
X test		wire servlet context
X  - pom
X test	      D script
X test	    - run with args
X	    = 3 screens
X no	get runMeeting running needs:
X no	 - multi-user say, ask, listen
X	     - collaborative scripts in the end, so no?
X	 - fix object lifecycle
X	 - decision: to have script source separated per user, but executions in a global namespace:
X	     - stupid or not?
X 	         no, because' of processes are per-user, then the correlation IDs have to 
X		return a user-UUID instead of just a UUID.
X seems OK? - script security
X not for now	 - public scripts?
X	 - real DAO
X		 - blob & 
X		 - map & set storage
X		 - S3 and SDS.
X	 story:
X	 / clean ? --> settings : login
X	 settings.save --> /scripts/list
X	 login -> list
X test	    - config
X test	    - switcher
X	 - webapp 1-time configuration (datastore, AWS keys, twitter keys)
X test	    - settings load/retrieve
X	 - get webapp links (login, lists, etc.) coherent
X - bring the whole codebase up to scratch ready for embedding in a webapp
X	    - products & libraries: Rhino, OpenID4Java, openid-selector, ACE, AWS/S3 & SDB, Spring
Xtest	 - get twitter medium working
Xtest	   - check is scriptustest in readonly?
X test	 - localhost url embedded in consumer_redirect.jsp
X test	 - fix normal & error terminations when no pid, report results somewhere when top-level process
X		[Object object] why?
X test	     - concept of "owner" means scripts can report back to owner,
X test		 error termination
X test		 normal terination 
X no	owner-->userId, all processes report back to admin console 
X test for now		  - only root process should report back? 
X no	 	prompt(timeout, particpant, message)
X no	 	poll(timeout, particpant, message)	 
X	 	say(participants, message)
X	 - task scheduler for timeouts (listen, ask)
X	    - testcase
X	    - AWS impl
X test	    - increment of 10 minutes?
X test		default say,
X test		 listen
X test		  & ask
X test		 exit
X test		 sleep(date/duration), 
X no	 - duration arithmetic
X test	       - ask(msg, [{who:who, timeout:12}]
X test	       - listen({who:who, timeout:12}]
X test	         - native object as 2nd or 3rd parameter
X	GET /process/5c18a2f0-c1a0-4c18-8061-206ddb6d9f4c
X	send to:robotoscriptu msg:before: Sat Aug 13 2011 21:39:34 GMT+0200 (CEST)
X	timeout
X	GET /process/0ab3477d-f693-425c-9db7-ca44fd7e715c
X	send 47008712-4628-4145-b2ae-5e6dbee3b5de to:robotoscriptu msg:null
X		1 doesn't work
X...test!		  -- will need process locking (if waiting and terminating at same time...)
X test	    - wake
X 	    - sleep
X test	    - timeout, but how?
X test		  -- bug both should be able to stop, and then parent should be able to wait on them later
X test	 - file-based DAO
X	   - find system.out.println
X no	 - duration arithmetic?
X test	 - process scheduler (with queue, mutable execution properties)
X	       - internSource is in two places
X KEEP	         - scriptusAPI, 
X		 - scriptProcess.create
X	         + assigning in wait.js, oh my!
X	       - test with new scriptusapi...
X	       - load fails?
X	other stuff
X test	 - don't forget to empty cidpid map, which should be per user or notat all
X	listen needs timeout
X yes    - does moving to a queue system, then altering the properties of the queue, 
X yes      give greater control e.g. in test-cases than just directly executing stuff?
X test	    - parameterise scheduling (not going to test twitter with hours of timeout...) 
X test	       - annoying: if I'm not willing to debug with putatively-final values for durations,
X test	         why should I expect anyone else to? In other words, why seconds for me debugging
X test	         and hours for everyone else? implies this will be necessary:
X test	         GRR
X test	         ^([0-9]+)[\\ ,]*([smhdwMqyDC])$
X test	 seconds	minutes	hours	days	weeks	fortnight	months	quarters	years	decades	centuries
X test	 s		m	h	d	w			M	q		y	
X	id is composed of:
X	    * time - 41 bits (millisecond precision w/ a custom epoch gives us 69 years)
X	    * configured machine id - 10 bits - gives us up to 1024 machines
X	    * sequence number - 12 bits - rolls over every 4096 per machine (with protection to avoid rollover in the same ms)
X fixed	the interaction / scheduler interface is not clean;
X fixed	 - cids should be uniquely dealt with by interaction medium to track
X	schedulers: not reporting error messages
X	 + queue?
X	-> s3 404s...
X test	     - incomings
X test	     - scheduled check
X test	     - what about if user = twitter client? (i.e. from & to ianso)	     
X test	     - store origin id with correlation?
X test	     - processed mentions
X test	     - tweeting undefineds
X test	 - command-line medium is not thread-safe
X test	 log file locations
X now unwrapped	 error messages are wrapped too many times, cause unreadability
X no	     - add explicit check  for readonly
X	        + reminder for read-only mode
X test	     - listen is broken
X test	     - 140-char limit?
X plunge...	put online
X	      - twitter, 
X	      process scheduler, 
X	license
X (&improvements, top-level object)
X	 - conceptual overview
X	   - interaction, dao, config, scheduler, ScriptusAPI
X	 - todos, javadocs
X	    model, 
X	    tests
X	 - design choices
X	   - explain why FS not rdbms
X	   - why not use reply IDs?
X	   - why not use stack for ask()?
X	   - duplicates in tweets!
X	convert docs to markdown
X !!	docs say "to", code says "who". Fix code!
X	implement get(url)
X	 - test
X	 - docs
X	typos from Sander
X	fix test dependency in main :-( - thanks Sander
X	 - change website foreground colour so it doesn't hurt the eyes
X	    - find a colour wheel and use it
X	spellchecker for docs
X	 cat docs/* | ispell -p misc/words.list -l | less
X	changes blog
X maybe	google group
X	 - write a user guide!
X test	 - better README + > md
Xtest?	 - wiki/documentation
X	document code
X test	    - duration args should accept Javascript date objects ... of course :-/
X	testcases for eval limitations
X	 - and for eval(get("")) as crude import
X	add knock knock as example
X	add atom feed to site!
X	doc index
X	TwitterCorrelation should be moved
X rabbithole	kill()
X 	 - test
X 	    - clean up system.outs,
X 	    - add assert to orders of wait & wait2 & kill tests
X	 - runWithLock ought to be in process scheduler...
X enfin	 - testcase for sleeping & running process
X	 - wait and kill tests aren't really correct until we can visit Fork with custom controller delegate
X	    - (means interface for scheduler, ...)
X	       - move package, change refs
X	 - documentation
X	 - site update
X	    - add kill()
X	 - add page to docs 
X	    - log() method, sheesh
X	       - docs, guidelines
X	       - blog post
X	    - line 32 Cannot find function days in object 1.
Xok	    - test with rejigged import
X	    - blog post
X		facebook apologia
X		 - introducing project
X		buzz/G+
X		Weaver mailing list post
X test	add exec(script, owner, args)
X test	 --without owner?
X	 -- blog post
X rabbithole   - NOT OK to kill non-existent / finished processes!!
X	ask for help
X	post to mailing list
X	    where it's stored in object hierarchy:
X		globalScope(ScriptusAPI)
X		slots"Number"
X		  value(IdFunctionObject)
X		    prototypeProperty(NativeNumber)
X		     slots
X		       name	"faargh" (id=2363)	
X-> eclipse logical structures ("return this") to escape
Xpatch		+JavaAdapter, NativeJavaTopPackage not serialisable
X no	   then copy slots that aren't 
X no	   -->override readObject, check how many times called?
X no	     ->standardReadObject
X	BUG extensions to normal prototypes disappear on reloading continuation
X	   only because of this 
X	        if (!f.hasTag(NUMBER_TAG)) {
X		    return super.execIdCall(f, cx, scope, thisObj, args);
X		}
X		+ similar logic in 3rd testcase prevents eval(get()) from working
X		+ not the same as stopping eval("cont()");
X		--> stripping all hasTag() breaks things badly. So where to stop?
X run tests...	  --understand the tag. Well into yak-shaving territory.
X no		  --email Igor? Norris?
X no		 ?-->readObject has to retrieve local NativeX impl, replace, 
X		cvs -d :pserver:anonymous@cvs-mirror.mozilla.org:/cvsroot co mozilla/js/tests
X		 - then ln -s ~/tests mozilla/js/tests
X		 - then unlink because it times out...
X		 tests on my branch:
X		  - moztestsuite fails 38/5546, 1433.407s
X		 tests on mozilla branch:
X		  - moztestsite fails 38/5546?! 1422.210s
X		 changing == to .equals() works fine...
X		  -> submit patch with 2 testcases included
X		  -> add null checks!
X		  -> run benchmarks first
X	custom repo for our version of Rhino(until it's in master)
X	 - add note to build instructions etc.
X	 - upload jar to GitHub :-/
X	test datejs (12).months().before(new Date())
X	 --> doesn't work, fix bug in eric's version
X test	Caused by: java.io.NotSerializableException: org.mozilla.javascript.ConsString
X test		at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1180)
X test		at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1528)
X	write testcase
Xno	-> add serialised to BoundFunction as well   
X	-> one more error like this and we will CHECK ALL THE THINGS!...
X no	public or shared scripts in the admin interface
X	serializable patch
X	 - propose
X	 - submit
X	- update microrepo with new jars... && push
X	  - not making a new version this time...
X	  mvn eclipse:eclipse & retry reminders
X	examples
X test	 - date reminder with stop command
X	lessons learnt:
X	 - for(var x in y) doesn't worka s expected
X test	[2011/11/01 20:52:44,376][ERROR][pool-2-thread-2] ScriptProcess.call() - script error
X test strange...	org.mozilla.javascript.EcmaError: TypeError: Cannot call method "isBefore" of undefined (reminder#66)
X test		at org.mozilla.javascript.ScriptRuntime.constructError(ScriptRuntime.java:3763)
X	 - add glossary to documentation
X link to google groups
X docd	Rhino bug: eval(get("")) doesn't work, var s = get(""); eval(s); does.
X	test links once gh-pages pushed
X	terminology:
X	 - s/interaction medium/transport/g?
X test	  - code
X	  - docs
X	 - s/DAO/datastore/g?
X test	  - code
X	  - docs
X no	 - program / running program // script / process?
X		JS weekly
X 800 hits, yay		show HN & reddit: Script long-running interactions on Twitter in JavaScript
X docd	DAO
X docd	TRANSPORTS
X docd	 - email
X docd	 - sms?
X docd	PIPES	
X docd	 - pipe()
X docd	 - read() & write()
X	Suggestions from Sander
X docd	 - email interaction medium
X docd	    - pop3 or imap?
X docd	 - multiple transports per script: use transport option
X docd	 - import/export functionality for DAO
X docd	    - separate DAO from ScriptProcess
X docd	    - versioning
X docd		DAO API versioning... important for evolution!
X docd		- how do we deal with blobs?
X docd	 - process table (see procfs)
X	Suggestions from Jenya
X	** features that would be nice
X	API
X docd	- get + post should expose response headers to script & allow headers to be specified.
X docd	- pipe(function(in, out){})?
X docd	  - say & listen to ids
X docd	- post()? etc?
X docd	- location & multimedia APIs
X docd	  look(); //photo upload
X docd	  where(); / at(); / near(); //location: coordinates
X docd	on root process termination, 
X docd	 - child processes should be re-parented, 
X docd	     - and when they terminate, what happens if their output has not been waited upon?
X docd	Timeout on listen() should make one last check before returning null to program	
X docd	remove listener registered on timeout
X docd	CID not stored per-user, too small a namespace for a big deployment (if that ever happens)...
X docd	scheduler is imprecise. use paging
X docd	kill - fix problem with running processes
X docd	   - needs time-machine to test properly...
X docd		 - test-bed with time-machine built in. How? should be mirror-image of script.
X docd	view source principle for scripts (using snapshotted debugger info from rhino)
X docd	online REPL / dev environment?
X docd	 - problem is doing fork & wait in browser JS, where there is no thread model (maybe with narcissus + cloning for fork)
X	   --> investigate how pipes & stdin/out works in UNIX
X docd	->keep view source principal: tools are scripts
X docd	 - from Sander, user admin
X docd	 - from Jenya, how to integrate with existing services & web-applications?
X docd	 - from Jenya, i.e. use it as workflow engine or store state of process
X docd	   - bind outputs to normal command?
X docd	Future directions inspired by UNIX
X docd	   procfs?
X docd	 - filesystem, read/write/open
X docd	 -> what gets mounted and how?
X docd	  /proc for admin, /bin with standard tools? (VSP!)
X docd	->REPL : pipe commands, e.g.
X docd	$ poll "Are widgets splunkable?" yes no
X docd	$ elect 2 "widget experts" | debate "Should widgets be splunked?"
X docd	lessons learnt from reminders.js:
X docd	 eval(get) means your script has to run onlne 
X docd	 -> good reason to have a filesystem 
X test	regexp based responses in dummy
X followup		JavaScript Weekly
X no		?feedback from this guy (rhino maintainer, works @ twitter):  constc.blogspot.com		
X done		ask friends for feedback
X	 & executable JAR?
X no	   - spring handlers merging
X	   - file name corrections?
X yes!	   - can we get it all in one file?
X	command-line options (
X	  port, 
X test	  config file)
X	comment POM & assembly files...
X!!	executable WAR deployable for v0.1.0
X test	improve internal first-time experience
X test	 - hardlinks to links to API documentation & known problems 
X	 - more links + content when new
X	documentation for executable WAR once uploaded
X	 - readme
X	 - minisite index
X	 - userguide
X test	documentation for executable WAR once uploaded
X	 - readme
X	 - minisite index
X	 - userguide
X	reformat patches & resubmit
X	 - pre-patch commit: 
X	  676a6746d41df70d0904a3ef5e14701db1c6fff4
 test	 - work with Twitter, not agin' it 
X test	    - use in-reply-to
X test	    - fix Long.toString() everywhere, 
X test	      - fix model, 
X test	            impl
X test	             & datastore
X	  test with real twitter
X	  test amazon DAO
X	fix DAO testcase, filesystem impl
X no	  It can also be combined with a short `timeout` parameter to loop and collect multiple responses in a short timeframe.
X no	   For an example of this see []().
X no	  -> timeout: 0 should return immediately if nothing is waiting. but how should things wait?
X no	  -> things shouldn't wait, if things arrive they should trigger execution
X no	    --> the exception is if the thing is already executing. Then the lock should enforce sequential access
X NO, used for twitter --> delete config.getSchedulerPollInterval(), config.getSchedulerTimeUnit());
X	       - the facade (update architecture doc)
X test --> schedulescriptaction & scheduleTask args fix
X	 - middle-man should do all scheduling 
X test--> replace saveScheduledTask with scheduleTask
X test --> facade should be bean
X test	    - change ask, say, listen to remove default 'to'
X test	    - messages should have a from attribute
X test case      - add messageId option to listen()
X reread		 - messageId documentation
X	see "~/say API blog post"
X feature	  --> allows multiple scripts to react to the same message. Feature or bug?
X test	 - Twitter is getting everywhere. TwitterCorrelation, ... + command line client isn't working
X test	 - TwitterCorrelation is only used for Twitter. 
X don't have this	 - processedTweets should be per-pid with a cursor (per account)
X test	 - Command line transport is broken
X test	    --> list messages
X test	    --> enter # of message to respond to
X test	    --> enter message	    	 
X test	 - generalise updateTwitterLastMentions to
X test	   --> updateTransportCursor(transport,String)
X test	   --> on cmdLine, use for sequence number of correlationIds
X	 - generalise listeners 
X no	 + random start interval?
X check	add nav links to posts pages	
X test	message routing broken for listen()
X test	must check timestamp on MC, correlation
X	message correlations not saved
X aargh	twitter checking not working
X no	wake not working?
X test	 - twitter 
X test	 & cmd
X test	  - needs to take normal messages, for listen()
X test	 & mock should use generic asynch queueing mechanism
X test	 listen() should use MessageCorrelation in all cases	 
X	 correlation storage doesn't allow multiple listeners to the same messge ID
X test	 for each response
X test	  --> select pid where cid = ?
X test	  union
X test	  --> select pid where to= :=response.from and cid is null and ts < response.time /*i.e. listened first*/
X test	  union
X test	  --> select pid where to is null and cid is null and ts < response.time	  
X test	  memory
X test	  file
X test	  AWS


